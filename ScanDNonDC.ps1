<#
	.SYNOPSIS
	Scan Domain controllers to verify correct DNS settings

	.DESCRIPTION
	Raise ticket and email if they are not correct

	.NOTES
    
#>
[cmdletbinding()]
Param()

#region Variables
    $kScript = 'scanDNSonDC'
    $configFile = "$($kScript)Config.txt"
    $Kdate = (Get-Date).ToString('yyyy-MM-dd_H-mm')
    $kScriptRoot = 'E:\Scripts\serverInventory'
    $klogRoot = 'E:\Scripts\Logs'
    $smtpServer = "smarthost"
    $recpt = 'user@company.com'
    $sender = $kScript + ".ps1@" + $($env:COMPUTERNAME).ToLower() + "." + $($env:USERDNSDOMAIN).ToLower()        
#endregion


#region Import Modules

    If (Get-Command -ea SilentlyContinue New-JiraTicket){ 
        Write-Verbose "Jira cmdlets are already loaded.)"
        } 
    Else{
        Write-Verbose "Loading NewJiraTicket Module"
        Import-Module NewJiraTicket
        }
#endregion

#region Logging
    if(!(Test-Path -Path "$klogRoot\$Kscript" )){
        New-Item -ItemType directory -Path "$klogRoot\$Kscript"
    }
    Start-Transcript -Path "$klogRoot\$Kscript\$Kdate-$kScript.log"
#endregion


################## Get all DNS Client Settings bar RODC and 2008 servers
$dc = Get-ADDomainController -Filter * | where {$_.IsReadOnly -eq $False -and $_.OperatingSystem -notlike "*2008*"}  
#$dc = $dc | select -first 3
$result2 = Foreach ($d in $dc){
    #Write-Host "Checking $($d.name)"
    Invoke-Command -ComputerName $d.name -ScriptBlock {Get-DnsClientServerAddress -AddressFamily IPv4 | Where {$_.InterfaceAlias -like "*thern*"}} | 
        Select @{Name='Server'; Expression={$d.name}}, @{Name='IPAddress'; Expression={$d.IPv4Address}}, @{Name='DNSServers'; Expression={$_.ServerAddresses}}
       
   }

################## Check Settings
$dnssettings = Import-CSV -Path (Join-Path $kScriptRoot $configFile)
$dnssettings = $dnssettings | Where {$_.Manual -ne "Yes"}

$aggobjSummary = @() 
Foreach ($r in $result2){

   $validatePrimary = ($dnssettings | where {$_.server -eq $r.server}).primary

    If ($r.ipaddress -eq $r.dnsservers[0]){
        Write-Host -ForegroundColor Yellow "$($r.server) using itself as primary - $($r.dnsservers[0])" 
        $objSummary = [pscustomobject]@{
                    Hostname = $r.server
                    PrimaryDNS  =  "Error - Using own IP"
                }
        } 
    ElseIf ($validatePrimary -eq $r.dnsservers[0]){
        Write-Host -ForegroundColor Green "$($r.server) Primary DNS Ok - $($r.dnsservers[0])" 
        $objSummary = [pscustomobject]@{
                    Hostname = $r.server
                    PrimaryDNS  =  "Ok - $($r.dnsservers[0])"
                }
   
        }
    ElseIf ((-not $validatePrimary)){
        Write-Host -ForegroundColor Green "$($r.server) not found in config file" 
        $objSummary = [pscustomobject]@{
                    Hostname = $r.server
                    PrimaryDNS  =  "Error - check server is in config file"
                }
   
        }
    Else {
        Write-Host -ForegroundColor Yellow "$($r.server) Primary DNS not as expected"
        $objSummary = [pscustomobject]@{
                    Hostname = $r.server
                    PrimaryDNS  =  "Error - Not as expected"
                }
    
    }

    If ((-not $validatePrimary)){
        Write-Host -ForegroundColor Green "$($r.server) not found in config file" 
        $objSummary = [pscustomobject]@{
                    Hostname = $r.server
                    SecondaryDNS  =  "Error - check server is in config file"
                }
   
        }
    ElseIf ($r.dnsservers[1] -ne "127.0.0.1"){
        Write-Host -ForegroundColor Yellow "$($r.server) not using loopback for secondary DNS"
        $objSummary | Add-Member -NotePropertyName SecondaryDNS -NotePropertyValue "Error - Not using 127.0.0.1"

        } 
    Else {
        Write-Host -ForegroundColor Green "$($r.server) Secondary DNS Ok - 127.0.0.1" 
        $objSummary | Add-Member -NotePropertyName SecondaryDNS -NotePropertyValue "Ok - 127.0.0.1"
    }

    $aggobjSummary += $objSummary  
    $validatePrimary = $null

}

$errorCheck = @($aggobjSummary | Where {$_.PrimaryDNS -like "*Error*" -or $_.SecondaryDNS -like "Error*"}) # Making sure it always has a count property




If ($errorCheck){

If ($errorCheck.Count -gt 1){$plural = 's'}Else{$plural = $null}

$jiraformatted = "{html}<pre><br> $($errorcheck | Out-String)<br><br></pre>{html}"# Input for Jira ticket
$jiraformatteddnssettings = "{html}<pre><br> $($dnssettings | Out-String)<br><br></pre>{html}"# Input for Jira ticket

# Jira Ticket
$strDescription = @"

This is an automated ticket generated by $kScript.ps1 running on $env:COMPUTERNAME

The following Domain Controller$plural $(If ($plural){"have"}Else{"has"}) incorrect DNS client settings.

$jiraformatted


Please ensure the DNS client settings are configured with a partner server as primary DNS and the loopback address as secondary. 


The expected configuration for domain controllers is as follows

$jiraformatteddnssettings

This configration is read by $($kScript).ps1 from $(Join-Path $kScriptRoot $configFile) running on $env:COMPUTERNAME

If the error shows the config is not as expected then this may be a new DC which has not been added to the config file yet
"@


# Email
$formatted = $result | select @{L='Name';E={$_.Name}},@{L='Location';E={$_.DistinguishedName}}| ConvertTo-Html -Fragment | Out-String

$body = "<style>BODY{font-family: Roboto; font-size: 12pt; color:#d3d3d3}" 
    $body = $body + "TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse; }"
    $body = $body + "TH{font-family: Roboto; font-size: 12pt;border-width: 1px;padding: 2px;border-style: solid;border-color: black;background-color:#1A1919}"
    $body = $body + "TD{font-family: Roboto; font-size: 12pt;border-width: 1px;padding: 2px;border-style: solid;border-color: black;background-color:#1A1919; text-align: center}"
    $body = $body + "</style>"  
    $body = $body + $formatted 
    $body = $body + "<br><br>A CT has been created"
    $body = $body + "<br><br>Sent by $($kscript).ps1 running on $($env:COMPUTERNAME)"

# Ticket
New-JiraTicket -Summary "Domain Controller$($plural) found with incorrect DNS client settings" -Description $strDescription -Labels 'Unplanned_Support'
}


Stop-Transcript
